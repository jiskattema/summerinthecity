
GeoJSON Tiles
============

Using tiles can speedup the display of large datasets; only relevant (ie. visible) tiles have to be loaded and plotted.
These scripts create a set of tiles from a large input dataset.

There are a few standard definitions for tiles (google, tile map server,..), use the script `globalmaptiles.py` to find which tiles are in a bounding box at a specific zoom level. The netherlands (longitude in 3.5 ~ 7.0, latitude 51 ~ 53.5) is more or less contained in google tile level 7 with coordinates: 65, 42:

    bash $ ./globalmaptiles.py 7 51.0 3.5 53.5 7.0
    
    == Tile Boundaries ==
    WGS84 datum (longitude/latitude):
    2.8125 50.736455137010665
    5.625 52.482780222078205
    Spherical Mercator (meters):
    313086.06785608083 6574807.42497772
    626172.1357121654 6887893.492833804
    Pixels at zoom 7:
    16640 10752 16896 11008

Creating a single tile
======================

In Summer in the City we are often working with the regions defined by the Dutch Statistical Office, the `buurt en wijk` dataset. The scripts assume a local postgres database is running, that holds a table with this data. It should be straight forward to read the same data from a shapefile, or to use different data alltogether.

    $ ./make_tile_buurt.sh 
    
    Create a single GeoJSON tile

    usage:  make_tile.sh latmin lonmin latmax lonmax output



    $ ./make_tile_gemeente.sh 

    Create a single GeoJSON tile

    usage:  make_tile.sh latmin lonmin latmax lonmax output


Creating all tiles for a specific zoom level
============================================

    $ ./make_tiles.py

    Usage: make_tiles.py [-profile 'mercator'|'geodetic'] zoomlevel lat lon [latmax lonmax]

This utility prints for given WGS84 lat/lon coordinates (or bounding box) the list of tiles
covering specified area. Tiles are in the given 'profile' (default is Google Maps 'mercator')
and in the given pyramid 'zoomlevel'.
For each tile several information is printed including bonding box in EPSG:900913 and WGS84.


At the moment, the script is hard coded to use `make_tile_buurt.sh`

Run
===
To generate tiles on 'buurt' level from the dataset for the netherlands, we can run:

     $ ./make_tiles.py 10  50.0 2.0 53.6 7.0








