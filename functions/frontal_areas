-- Frontal area depending on orientation
-- divided by the gridcell area
--
-- depends on: gebouw, the TOP10NL table for buildings
--             ohn, the object height map, relative to maaiveld (ie. building height)
--
-- frontal_area_ns(pixel geometry)
-- frontal_area_45(pixel geometry)
-- frontal_area_ew(pixel geometry)
-- frontal_area_135(pixel geometry)

-- arguments: pixel, geometry     gridcell to analyze
-- returns: frontal area per gridcell in [m2 / m2]

-- Internal function:
-- frontal_area_helper(pixel geometry)
-- returns the intersection of the gridcell with the OHN raster and the TOP10NL gebouwen


-- Helper function: get elevation of all buildings intersecting the geometry as a single raster
CREATE OR REPLACE FUNCTION frontal_area_helper(pixel geometry) RETURNS raster
AS $$
DECLARE
    rrid   integer;
    srid   integer;
    pixel_srid geometry;
    result raster;
BEGIN

    -- get the correct SRIDs
    SELECT ST_SRID(rast)         FROM ohn     LIMIT 1 INTO rrid ;  
    SELECT ST_SRID(wkb_geometry) FROM gebouw  LIMIT 1 INTO srid ;  

    SELECT ST_Transform( pixel, srid) INTO pixel_srid;

    SELECT
        ST_Union( ST_Clip( rast, ST_Transform( geom, rrid ) ) )
    FROM
        (
        SELECT
            ST_Union( ST_Intersection( wkb_geometry, pixel_srid ) ) AS geom
        FROM
            gebouw
        WHERE
            (wkb_geometry && pixel_srid) AND ST_Intersects( wkb_geometry, pixel_srid )
        ) AS foo,
        ohn
    WHERE
        (rast && ST_Transform( geom, rrid )) AND ST_Intersects( rast, ST_Transform( geom, rrid ) )
    INTO
        result;

    RETURN result;

END;
$$ LANGUAGE plpgsql;


-- Frontal area depending on orientation: North-South
CREATE OR REPLACE FUNCTION frontal_area_ns(pixel geometry) RETURNS real
AS $$
DECLARE
    relief   raster;
    result   real;
    cellarea real;
    record   record;
BEGIN

    SELECT frontal_area_helper(pixel) INTO relief;
    SELECT ST_Area( ST_Transform( pixel, 28992 ) ) INTO cellarea;
   
    IF relief IS NULL THEN
        RETURN 0;
    END IF;
 
    SELECT
        SUM(height)
    FROM
        (
        SELECT 
            MAX(val) AS height
        FROM
            (
            SELECT
                (dot).x, (dot).y, (dot).val
            FROM
                (
                SELECT ST_PixelAsPolygons( relief ) AS dot
                ) AS foo
            ) AS foo
        GROUP BY
            x
        ) AS foo
    INTO
        result;

    -- Keep results meaningfull
    IF result > 0 THEN
        RETURN result * ST_PixelWidth( relief ) / cellarea;
    END IF;

    RETURN 0;

END;
$$ LANGUAGE plpgsql;


-- Frontal area depending on orientation: East-West
CREATE OR REPLACE FUNCTION frontal_area_ew(pixel geometry) RETURNS real
AS $$
DECLARE
    relief  raster;
    result  real;
    cellarea real;
    record  record;
BEGIN

    SELECT frontal_area_helper(pixel) INTO relief;
    SELECT ST_Area( ST_Transform( pixel, 28992 ) ) INTO cellarea;
    
    IF relief IS NULL THEN
        RETURN 0;
    END IF;

    SELECT
        SUM(height)
    FROM
        (
        SELECT 
            MAX(val) AS height
        FROM
            (
            SELECT
                (dot).x, (dot).y, (dot).val
            FROM
                (
                SELECT ST_PixelAsPolygons( relief ) AS dot
                ) AS foo
            ) AS foo
        GROUP BY
            y
        ) AS foo
    INTO
        result;

    -- Keep results meaningfull
    IF result > 0 THEN
        RETURN result * ST_PixelHeight(relief) / cellarea;
    END IF;

    RETURN 0;

END;
$$ LANGUAGE plpgsql;


-- Frontal area depending on orientation: North-East - South-West
CREATE OR REPLACE FUNCTION frontal_area_45(pixel geometry) RETURNS real
AS $$
DECLARE
    relief  raster;
    result  real;
    cellarea real;
    record  record;
BEGIN

    SELECT frontal_area_helper(pixel) INTO relief;
    SELECT ST_Area( ST_Transform( pixel, 28992 ) ) INTO cellarea;
    
    IF relief IS NULL THEN
        RETURN 0;
    END IF;

    SELECT
        SUM(height)
    FROM
        (
        SELECT 
            MAX(val) AS height
        FROM
            (
            SELECT
                (dot).x + (dot).y AS a,
                (dot).x - (dot).y AS b,
                (dot).val
            FROM
                (
                SELECT ST_PixelAsPolygons( relief ) AS dot
                ) AS foo
            ) AS foo
        GROUP BY
            b    
        ) AS foo
    INTO
        result;

    -- Keep results meaningfull
    IF result > 0 THEN
        RETURN result * sqrt( ST_PixelHeight(relief)^2 + ST_PixelWidth(relief)^2 ) / cellarea;
    END IF;

    RETURN 0;

END;
$$ LANGUAGE plpgsql;

-- Frontal area depending on orientation: South-East - North-West
CREATE OR REPLACE FUNCTION frontal_area_135(pixel geometry) RETURNS real
AS $$
DECLARE
    relief  raster;
    result  real;
    cellarea real;
    record  record;
BEGIN

    SELECT frontal_area_helper(pixel) INTO relief;
    SELECT ST_Area( ST_Transform( pixel, 28992 ) ) INTO cellarea;
    
    IF relief IS NULL THEN
        RETURN 0;
    END IF;

    SELECT
        SUM(height)
    FROM
        (
        SELECT 
            MAX(val) AS height
        FROM
            (
            SELECT
                (dot).x + (dot).y AS a,
                (dot).x - (dot).y AS b,
                (dot).val
            FROM
                (
                SELECT ST_PixelAsPolygons( relief ) AS dot
                ) AS foo
            ) AS foo
        GROUP BY
            a    
        ) AS foo
    INTO
        result;

    -- Keep results meaningfull
    IF result > 0 THEN
        RETURN result * sqrt( ST_PixelHeight(relief)^2 + ST_PixelWidth(relief)^2 ) / cellarea;
    END IF;

    RETURN 0;

END;
$$ LANGUAGE plpgsql;

